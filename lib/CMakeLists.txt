cmake_minimum_required(VERSION 3.20)

project(pont DESCRIPTION "A library to test transitive dependencies" VERSION 0.0.1 LANGUAGES C)

set(CMAKE_SKIP_RPATH TRUE)
set(CMAKE_VERBOSE_MAKEFILE TRUE)
set(CMAKE_C_STANDARD 99)
# The following command should be equivalent, but it doesn't work
# target_compile_features(${PROJECT_NAME} PUBLIC c_std_99)
set(CMAKE_C_EXTENSIONS OFF)

add_library(${PROJECT_NAME} src/pont.c)

# Add the option for OpenMP support
option(WITH_OPENMP "Enable OpenMP" ON)
if(WITH_OPENMP)
    # When enabled, our library has a depency on OpenMP and it must be
    # transfered to client apps for linking
    find_package(OpenMP)
    target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_C)
endif()

# It's important to distinguish between the path of header when building
# our project (lib) and when it's installed for other client apps
target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)
set_target_properties(${PROJECT_NAME} PROPERTIES
    VERSION ${PROJECT_VERSION}
    PUBLIC_HEADER "${PROJECT_INCLUDE_FILES}"
    POSITION_INDEPENDENT_CODE ON
    OUTPUT_NAME pont
)

# Headers and other static files must be explicitly installed
install(FILES include/pont.h DESTINATION include)

# Ask CMake to generate targets for users of the library
install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

# Install the Targets files generated by the previous command
install(EXPORT ${PROJECT_NAME}Targets
    FILE ${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION lib/cmake/${PROJECT_NAME}
)

# Add an alias to the library int the namespace so that other projects
# can include this CMake project within theirs and use it directly
add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

# Create the package config file from the template
include(CMakePackageConfigHelpers)
configure_package_config_file(
    Config.cmake.in
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION "lib/cmake/${PROJECT_NAME}"
)
write_basic_package_version_file("${PROJECT_NAME}ConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
)

# Install the package config files
install(
    FILES
        "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION
        lib/cmake/${PROJECT_NAME}
)
